[tool.poetry]
name = "libmlops"
version = "0.1.0"
description = ""
authors = ["wolffy-au <wolffborg1@gmail.com>"]
license = "GPL-3"
readme = "README.md"
homepage = "https://github.com/wolffy-au/MLOPS_Template/"
repository = "https://github.com/wolffy-au/MLOPS_Template"
packages = [
    { include = "libmlops" },
]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
joblib = "^1.3.2"
keras = "^2.15.0"
matplotlib = "^3.8.0"
numpy = "^1.25.0"
pandas = "^2.0.3"
pytest = "^7.4"
scikit-learn = "^1.3.2"
scipy = "^1.11.1"
xgboost = "^1.7.6"
tensorflow = "^2.15.0"
tensorflow-estimator = "^2.15.0"
tensorflow-intel = "^2.15.0"
tensorflow-io-gcs-filesystem = "0.31.0"
seaborn = "^0.13.1"
pytest-cov = "^4.1.0"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.27"
pyright = "^1.1"
jupyter = "^1.0.0"
ipywidgets = "^8.1.1"
black = "^23.12.0"

[tool.poetry.group.jenkins.dependencies]
python = ">=3.9.13,<=3.9.18"
joblib = "1.3.2"
matplotlib = "3.8.0"
numpy = "1.25.0"
pandas = "2.0.3"
pytest = "7.4.3"
scikit-learn = "1.3.2"
scipy = "1.11.1"
xgboost = "1.7.6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
# Optional: Specify the Python version for Pyright to use
#pythonVersion = "3.11"

# Optional: Specify additional search paths for modules
# This is useful if your project has a non-standard structure
# For example, if your source code is in the 'src' directory:
#searchPaths = ["src"]

[tool.pytest.ini_options]
addopts = "--cov --cov-report html --cov-report term-missing"
# --cov-fail-under 95"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "*/.vscode/*",
    "tests/*",
    # omit anything in a .local directory anywhere
    #"*/.local/*",
    # omit everything in /usr
    #"/usr/*",
    # omit this single file
    #"utils/tirefire.py",
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    "print",
    "plt.",
    "pyplot.",
    "ConfusionMatrixDisplay",
    ]
ignore_errors = false
skip_covered = true

[tool.coverage.html]
directory = "tests/cover"
